[{"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/index.tsx":"1","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/reportWebVitals.ts":"2","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/App.tsx":"3","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/hooks/form.ts":"4","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/auth/SignUp.tsx":"5","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/Routes.tsx":"6","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/auth/SignIn.tsx":"7","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/layout/Dashboard.tsx":"8","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/Footer.tsx":"9","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/AppBar.tsx":"10","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/Sidebar.tsx":"11","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/theme.ts":"12","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/typography.ts":"13","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/variants.ts":"14","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/breakpoints.ts":"15","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/overrides.ts":"16","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/props.ts":"17","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/shadows.ts":"18","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/constants.ts":"19","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Home.tsx":"20","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/account/ApiKeys.tsx":"21","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/api-keys.ts":"22","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/graphql/client.ts":"23","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/Confirmation/index.tsx":"24","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Portfolio.tsx":"25","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/portfolio.ts":"26","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/CryptoIcon/index.tsx":"27","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Orders.tsx":"28","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/orders.ts":"29","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Exchange/index.tsx":"30","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/tokens.ts":"31","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/instruments.ts":"32","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/hooks/helpers.ts":"33","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/PriceButton/index.tsx":"34","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/PriceButton/types.ts":"35","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Exchange/styles.ts":"36"},{"size":500,"mtime":1611682750115,"results":"37","hashOfConfig":"38"},{"size":425,"mtime":1611682750115,"results":"39","hashOfConfig":"38"},{"size":2417,"mtime":1616520775842,"results":"40","hashOfConfig":"38"},{"size":973,"mtime":1616179866148,"results":"41","hashOfConfig":"38"},{"size":5360,"mtime":1618150951798,"results":"42","hashOfConfig":"38"},{"size":1942,"mtime":1615740184359,"results":"43","hashOfConfig":"38"},{"size":5151,"mtime":1618150985362,"results":"44","hashOfConfig":"38"},{"size":2649,"mtime":1616521048070,"results":"45","hashOfConfig":"38"},{"size":2171,"mtime":1613065947549,"results":"46","hashOfConfig":"38"},{"size":3552,"mtime":1616520910586,"results":"47","hashOfConfig":"38"},{"size":12117,"mtime":1618149737776,"results":"48","hashOfConfig":"38"},{"size":757,"mtime":1612853153787,"results":"49","hashOfConfig":"38"},{"size":1139,"mtime":1612852034321,"results":"50","hashOfConfig":"38"},{"size":5443,"mtime":1612852799303,"results":"51","hashOfConfig":"38"},{"size":147,"mtime":1612852017737,"results":"52","hashOfConfig":"38"},{"size":1650,"mtime":1612852026887,"results":"53","hashOfConfig":"38"},{"size":256,"mtime":1612852029741,"results":"54","hashOfConfig":"38"},{"size":683,"mtime":1612852032620,"results":"55","hashOfConfig":"38"},{"size":150,"mtime":1612852795103,"results":"56","hashOfConfig":"38"},{"size":527,"mtime":1618151391855,"results":"57","hashOfConfig":"38"},{"size":4523,"mtime":1618158359199,"results":"58","hashOfConfig":"38"},{"size":602,"mtime":1613198610934,"results":"59","hashOfConfig":"38"},{"size":468,"mtime":1613068809528,"results":"60","hashOfConfig":"38"},{"size":2641,"mtime":1613199140066,"results":"61","hashOfConfig":"38"},{"size":3561,"mtime":1618162858733,"results":"62","hashOfConfig":"38"},{"size":313,"mtime":1615539188121,"results":"63","hashOfConfig":"38"},{"size":439,"mtime":1616525073206,"results":"64","hashOfConfig":"38"},{"size":4547,"mtime":1618158344163,"results":"65","hashOfConfig":"38"},{"size":568,"mtime":1618149250081,"results":"66","hashOfConfig":"38"},{"size":12744,"mtime":1618162439122,"results":"67","hashOfConfig":"38"},{"size":168,"mtime":1616054579385,"results":"68","hashOfConfig":"38"},{"size":224,"mtime":1616054488778,"results":"69","hashOfConfig":"38"},{"size":482,"mtime":1616223908077,"results":"70","hashOfConfig":"38"},{"size":1647,"mtime":1618151858984,"results":"71","hashOfConfig":"38"},{"size":62,"mtime":1616334888069,"results":"72","hashOfConfig":"38"},{"size":521,"mtime":1616604494250,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1e4uya8",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/index.tsx",[],["152","153"],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/reportWebVitals.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/App.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/hooks/form.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/auth/SignUp.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/Routes.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/auth/SignIn.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/layout/Dashboard.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/Footer.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/AppBar.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/Sidebar.tsx",["154","155","156","157","158"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components/macro\";\r\nimport { rgba } from \"polished\";\r\nimport { NavLink, withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { darken } from \"polished\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport \"../vendor/perfect-scrollbar.css\";\r\n\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\nimport {\r\n  Badge,\r\n  Box as MuiBox,\r\n  Chip,\r\n  Grid,\r\n  Avatar,\r\n  Collapse,\r\n  Drawer as MuiDrawer,\r\n  List as MuiList,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\n\r\nimport { green } from \"@material-ui/core/colors\";\r\n\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport ListIcon from '@material-ui/icons/List';\r\n\r\nconst Box = styled(MuiBox)(spacing);\r\n\r\nconst Drawer = styled(MuiDrawer)`\r\n  border-right: 0;\r\n\r\n  > div {\r\n    border-right: 0;\r\n  }\r\n`;\r\n\r\nconst Scrollbar = styled(PerfectScrollbar)`\r\n  background-color: ${(props) => props.theme.sidebar.background};\r\n  border-right: 1px solid rgba(0, 0, 0, 0.12);\r\n`;\r\n\r\nconst List = styled(MuiList)`\r\n  background-color: ${(props) => props.theme.sidebar.background};\r\n`;\r\n\r\nconst Items = styled.div`\r\n  padding-top: ${(props) => props.theme.spacing(2.5)}px;\r\n  padding-bottom: ${(props) => props.theme.spacing(2.5)}px;\r\n`;\r\n\r\nconst Brand = styled(ListItem) <{\r\n  button?: boolean;\r\n  component?: React.ReactNode;\r\n  to?: string;\r\n}>`\r\n  font-size: ${(props) => props.theme.typography.h5.fontSize};\r\n  font-weight: ${(props) => props.theme.typography.fontWeightMedium};\r\n  color: ${(props) => props.theme.sidebar.header.color};\r\n  background-color: ${(props) => props.theme.sidebar.header.background};\r\n  font-family: ${(props) => props.theme.typography.fontFamily};\r\n  min-height: 56px;\r\n  padding-left: ${(props) => props.theme.spacing(6)}px;\r\n  padding-right: ${(props) => props.theme.spacing(6)}px;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  ${(props) => props.theme.breakpoints.up(\"sm\")} {\r\n    min-height: 64px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${(props) => props.theme.sidebar.header.background};\r\n  }\r\n`;\r\n\r\n// const BrandIcon = styled(Logo)`\r\n//   margin-right: ${(props) => props.theme.spacing(2)}px;\r\n//   color: ${(props) => props.theme.sidebar.header.brand.color};\r\n//   fill: ${(props) => props.theme.sidebar.header.brand.color};\r\n//   width: 32px;\r\n//   height: 32px;\r\n// `;\r\n\r\nconst BrandChip = styled(Chip)`\r\n  background-color: ${green[700]};\r\n  border-radius: 5px;\r\n  color: ${(props) => props.theme.palette.common.white};\r\n  font-size: 55%;\r\n  height: 18px;\r\n  margin-left: 2px;\r\n  margin-top: -16px;\r\n  padding: 3px 0;\r\n\r\n  span {\r\n    padding-left: ${(props) => props.theme.spacing(1.375)}px;\r\n    padding-right: ${(props) => props.theme.spacing(1.375)}px;\r\n  }\r\n`;\r\n\r\ntype CategoryType = {\r\n  activeClassName?: string;\r\n  button?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n  component?: typeof NavLink;\r\n  exact?: boolean;\r\n};\r\n\r\nconst Category = styled(ListItem) <CategoryType>`\r\n  padding-top: ${(props) => props.theme.spacing(3)}px;\r\n  padding-bottom: ${(props) => props.theme.spacing(3)}px;\r\n  padding-left: ${(props) => props.theme.spacing(8)}px;\r\n  padding-right: ${(props) => props.theme.spacing(7)}px;\r\n  font-weight: ${(props) => props.theme.typography.fontWeightRegular};\r\n\r\n  svg {\r\n    color: ${(props) => props.theme.sidebar.color};\r\n    font-size: 20px;\r\n    width: 20px;\r\n    height: 20px;\r\n    opacity: 0.5;\r\n  }\r\n\r\n  &:hover {\r\n    background: rgba(0, 0, 0, 0.08);\r\n  }\r\n\r\n  &.${(props) => props.activeClassName} {\r\n    background-color: ${(props) =>\r\n    darken(0.03, props.theme.sidebar.background)};\r\n\r\n    span {\r\n      color: ${(props) => props.theme.sidebar.color};\r\n    }\r\n  }\r\n`;\r\n\r\nconst CategoryText = styled(ListItemText)`\r\n  margin: 0;\r\n  span {\r\n    color: ${(props) => props.theme.sidebar.color};\r\n    font-size: ${(props) => props.theme.typography.body1.fontSize}px;\r\n    padding: 0 ${(props) => props.theme.spacing(4)}px;\r\n  }\r\n`;\r\n\r\nconst CategoryIconLess = styled(ExpandLess)`\r\n  color: ${(props) => rgba(props.theme.sidebar.color, 0.5)};\r\n`;\r\n\r\nconst CategoryIconMore = styled(ExpandMore)`\r\n  color: ${(props) => rgba(props.theme.sidebar.color, 0.5)};\r\n`;\r\n\r\nconst Link = styled(ListItem) <{\r\n  activeClassName: string;\r\n  component: typeof NavLink;\r\n  exact: boolean;\r\n  to: string;\r\n}>`\r\n  padding-left: ${(props) => props.theme.spacing(17.5)}px;\r\n  padding-top: ${(props) => props.theme.spacing(2)}px;\r\n  padding-bottom: ${(props) => props.theme.spacing(2)}px;\r\n\r\n  span {\r\n    color: ${(props) => rgba(props.theme.sidebar.color, 0.7)};\r\n  }\r\n\r\n  &:hover span {\r\n    color: ${(props) => rgba(props.theme.sidebar.color, 0.9)};\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${(props) =>\r\n    darken(0.015, props.theme.sidebar.background)};\r\n  }\r\n\r\n  &.${(props) => props.activeClassName} {\r\n    background-color: ${(props) =>\r\n    darken(0.03, props.theme.sidebar.background)};\r\n\r\n    span {\r\n      color: ${(props) => props.theme.sidebar.color};\r\n    }\r\n  }\r\n`;\r\n\r\nconst LinkText = styled(ListItemText)`\r\n  color: ${(props) => props.theme.sidebar.color};\r\n  span {\r\n    font-size: ${(props) => props.theme.typography.body1.fontSize}px;\r\n  }\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n`;\r\n\r\nconst LinkBadge = styled(Chip)`\r\n  font-size: 11px;\r\n  font-weight: ${(props) => props.theme.typography.fontWeightBold};\r\n  height: 20px;\r\n  position: absolute;\r\n  right: 28px;\r\n  top: 8px;\r\n  background: ${(props) => props.theme.sidebar.badge.background};\r\n\r\n  span.MuiChip-label,\r\n  span.MuiChip-label:hover {\r\n    cursor: pointer;\r\n    color: ${(props) => props.theme.sidebar.badge.color};\r\n    padding-left: ${(props) => props.theme.spacing(2)}px;\r\n    padding-right: ${(props) => props.theme.spacing(2)}px;\r\n  }\r\n`;\r\n\r\nconst CategoryBadge = styled(LinkBadge)`\r\n  top: 12px;\r\n`;\r\n\r\nconst SidebarSection = styled(Typography)`\r\n  color: ${(props) => props.theme.sidebar.color};\r\n  padding: ${(props) => props.theme.spacing(4)}px\r\n    ${(props) => props.theme.spacing(7)}px\r\n    ${(props) => props.theme.spacing(1)}px;\r\n  opacity: 0.9;\r\n  display: block;\r\n`;\r\n\r\nconst SidebarFooter = styled.div`\r\n  background-color: ${(props) =>\r\n    props.theme.sidebar.footer.background} !important;\r\n  padding: ${(props) => props.theme.spacing(2.75)}px\r\n    ${(props) => props.theme.spacing(4)}px;\r\n  border-right: 1px solid rgba(0, 0, 0, 0.12);\r\n`;\r\n\r\nconst SidebarFooterText = styled(Typography)`\r\n  color: ${(props) => props.theme.sidebar.footer.color};\r\n`;\r\n\r\nconst SidebarFooterSubText = styled(Typography)`\r\n  color: ${(props) => props.theme.sidebar.footer.color};\r\n  font-size: 0.7rem;\r\n  display: block;\r\n  padding: 1px;\r\n`;\r\n\r\nconst SidebarFooterBadge = styled(Badge)`\r\n  margin-right: ${(props) => props.theme.spacing(1)}px;\r\n  span {\r\n    background-color: ${(props) =>\r\n    props.theme.sidebar.footer.online.background};\r\n    border: 1.5px solid ${(props) => props.theme.palette.common.white};\r\n    height: 12px;\r\n    width: 12px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\ntype SidebarCategoryPropsType = {\r\n  name: string;\r\n  icon: JSX.Element;\r\n  classes?: string;\r\n  isOpen?: boolean;\r\n  isCollapsable: boolean;\r\n  badge?: string | number;\r\n  activeClassName?: string;\r\n  button: true;\r\n  onClick?: () => void;\r\n  to?: string;\r\n  component?: typeof NavLink;\r\n  exact?: boolean;\r\n};\r\n\r\nconst SidebarCategory: React.FC<SidebarCategoryPropsType> = ({\r\n  name,\r\n  icon,\r\n  classes,\r\n  isOpen,\r\n  isCollapsable,\r\n  badge,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Category {...rest}>\r\n      {icon}\r\n      <CategoryText>{name}</CategoryText>\r\n      {isCollapsable ? (\r\n        isOpen ? (\r\n          <CategoryIconMore />\r\n        ) : (\r\n          <CategoryIconLess />\r\n        )\r\n      ) : null}\r\n      {badge ? <CategoryBadge label={badge} /> : \"\"}\r\n    </Category>\r\n  );\r\n};\r\n\r\ntype SidebarLinkPropsType = {\r\n  name: string;\r\n  to: string;\r\n  badge?: string | number;\r\n  icon?: JSX.Element;\r\n};\r\n\r\nconst SidebarLink: React.FC<SidebarLinkPropsType> = ({\r\n  name,\r\n  to,\r\n  badge,\r\n  icon,\r\n}) => {\r\n  return (\r\n    <Category\r\n      button\r\n      dense\r\n      component={NavLink}\r\n      exact\r\n      to={to}\r\n      activeClassName=\"active\"\r\n    >\r\n      {icon}\r\n      <CategoryText>{name}</CategoryText>\r\n      {badge ? <LinkBadge label={badge} /> : \"\"}\r\n    </Category>\r\n  );\r\n};\r\n\r\ntype SidebarPropsType = {\r\n  classes?: string;\r\n  staticContext: string;\r\n  location: {\r\n    pathname: string;\r\n  };\r\n  PaperProps: {\r\n    style: {\r\n      width: number;\r\n    };\r\n  };\r\n  variant?: \"permanent\" | \"persistent\" | \"temporary\";\r\n  open?: boolean;\r\n  onClose?: () => void;\r\n};\r\n\r\nconst Sidebar: React.FC<RouteComponentProps & SidebarPropsType> = ({\r\n  classes,\r\n  staticContext,\r\n  location,\r\n  ...rest\r\n}) => {\r\n  type tplotOptions = {\r\n    [key: number]: boolean;\r\n  };\r\n  const initOpenRoutes = (): tplotOptions => {\r\n    /* Open collapse element that matches current url */\r\n    // const pathName = location.pathname;\r\n\r\n    let _routes = {};\r\n\r\n    // routes.forEach((route: any, index: any) => {\r\n    //   const isActive = pathName.indexOf(route.path) === 0;\r\n    //   const isOpen = route.open;\r\n    //   const isHome = route.containsHome && pathName === \"/\";\r\n\r\n    //   _routes = Object.assign({}, _routes, {\r\n    //     [index]: isActive || isOpen || isHome,\r\n    //   });\r\n    // });\r\n\r\n    return _routes;\r\n  };\r\n\r\n  const [openRoutes, setOpenRoutes] = useState(() => initOpenRoutes());\r\n\r\n  const toggle = (index: number) => {\r\n    // Collapse all elements\r\n    Object.keys(openRoutes).forEach(\r\n      (item) =>\r\n        openRoutes[index] ||\r\n        setOpenRoutes((openRoutes) =>\r\n          Object.assign({}, openRoutes, { [item]: false })\r\n        )\r\n    );\r\n\r\n    // Toggle selected element\r\n    setOpenRoutes((openRoutes) =>\r\n      Object.assign({}, openRoutes, { [index]: !openRoutes[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Drawer variant=\"permanent\" {...rest}>\r\n      <Brand component={NavLink} to=\"/\" button>\r\n        {/* <BrandIcon />{\" \"} */}\r\n        <Box ml={1}>\r\n          Quiditeo <BrandChip label=\".COM\" />\r\n        </Box>\r\n      </Brand>\r\n      <Scrollbar>\r\n        <List disablePadding>\r\n          <Items>\r\n            <SidebarSection>Explore</SidebarSection>\r\n            <SidebarLink\r\n              name={\"Exchange\"}\r\n              to={\"/exchange\"}\r\n              icon={<ShowChartIcon />}\r\n            // badge={8}\r\n            />\r\n            <SidebarLink\r\n              name={\"Portfolio\"}\r\n              to={\"/portfolio\"}\r\n              icon={<AccountBalanceWalletIcon />}\r\n            // badge={8}\r\n            />\r\n            <SidebarLink\r\n              name={\"Orders\"}\r\n              to={\"/orders\"}\r\n              icon={<ListIcon />}\r\n            // badge={8}\r\n            />\r\n             <SidebarSection>Account</SidebarSection>\r\n             <SidebarLink\r\n                name={\"API Keys\"}\r\n                to={\"/account/apikeys\"}\r\n                icon={<VpnKeyIcon />}\r\n              // badge={8}\r\n              />\r\n          </Items>\r\n        </List>\r\n      </Scrollbar>\r\n      <SidebarFooter>\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            <SidebarFooterBadge\r\n              overlap=\"circle\"\r\n              anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"right\",\r\n              }}\r\n              variant=\"dot\"\r\n            >\r\n              <Avatar\r\n                alt=\"Thomas Poli\"\r\n                src=\"/static/img/avatars/avatar-1.jpg\"\r\n              />\r\n            </SidebarFooterBadge>\r\n          </Grid>\r\n          <Grid item>\r\n            <SidebarFooterText variant=\"body2\">Thomas Poli</SidebarFooterText>\r\n            <SidebarFooterSubText variant=\"caption\">\r\n              thomas.poli2@gmail.com\r\n            </SidebarFooterSubText>\r\n          </Grid>\r\n        </Grid>\r\n      </SidebarFooter>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default withRouter(Sidebar);\r\n","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/theme.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/typography.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/variants.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/breakpoints.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/overrides.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/props.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/shadows.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/theme/constants.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Home.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/account/ApiKeys.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/api-keys.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/graphql/client.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/Confirmation/index.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Portfolio.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/portfolio.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/CryptoIcon/index.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Orders.tsx",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/orders.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Exchange/index.tsx",["159"],"\nimport React, { useState, useCallback } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport {\n  // Breadcrumbs as MuiBreadcrumbs,\n  // Card as MuiCard,\n  // CardContent as MuiCardContent,\n  // Divider as MuiDivider,\n  Paper as MuiPaper,\n  Button,\n  IconButton,\n  Chip,\n  Typography,\n  Grid,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  DialogActions,\n  DialogContentText,\n  TextField,\n  LinearProgress\n} from \"@material-ui/core\";\nimport styled from \"styled-components/macro\";\n\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nimport { spacing } from \"@material-ui/system\";\nimport { useQuery } from '@apollo/client';\n\nimport { PriceButton } from \"./../../components/PriceButton\";\n\nimport './../../price.css';\nimport { Instrument, LIST_INSTRUMENTS } from '../../repositories/instruments';\nimport { GET_TOKEN } from '../../repositories/tokens';\nimport { Subscribe, Subscription, Token, Order, OrderResult, EventPriceUpdate, OrdersState } from \"./types\";\nimport { CryptoIcon } from '../../components/CryptoIcon';\nimport PairsInfo from \"./../../pairInfos.json\";\nimport { TYPE_PRICE } from '../../components/PriceButton/types';\nimport { useStyles } from \"./styles\";\nimport { useFormFields } from './../../hooks/form';\n// import { useInterval } from '../../hooks/helpers';\n\n// const Card = styled(MuiCard)(spacing);\n\n// const CardContent = styled(MuiCardContent)(spacing);\n\n// const Divider = styled(MuiDivider)(spacing);\n\n// const Breadcrumbs = styled(MuiBreadcrumbs)(spacing);\n\nconst Paper = styled(MuiPaper)(spacing);\n\n\n// const SmallButton = styled(Button)`\n//   padding: 4px;\n//   min-width: 0;\n\n//   svg {\n//     width: 0.9em;\n//     height: 0.9em;\n//   }\n// `;\n\n\n\nexport function Exchange() {\n\n  const { data: dataInstr } = useQuery(LIST_INSTRUMENTS);\n  const { refetch: refetchToken } = useQuery(GET_TOKEN);\n  // const [socket, setSocket] = useState<WebSocket>();\n  // const socket = useRef<WebSocket | null>(null)\n  const [prices, setPrices] = useState<{ [id: string]: number }>({});\n  const [subscriptions, setSubscriptions] = useState<{ [id: string]: Subscription }>({});\n  const [openChangeLevel, setOpenChangeLevel] = useState<boolean>(false);\n  const [openOrderDialog, setOpenOrderDialog] = useState<boolean>(false);\n  const [orderInProgress, setOrderInProgress] = useState<Order | null>();\n\n  const [ordersState, setOrdersState] = useState<OrdersState>({});\n\n  const [levelChangePair, setLevelChangePair] = useState<string>(\"\");\n  const [fields, handleFieldChange, setFields] = useFormFields({\n    level: \"\",\n  });\n  const classes = useStyles();\n\n  const getSocketUrl = useCallback(async (): Promise<string> => {\n    let token: Token;\n    try {\n      const response = await refetchToken();\n      token = response.data.getToken\n    } catch (e) {\n      console.log(e);\n      return Promise.reject(e);\n    }\n\n    const params: URLSearchParams = new URLSearchParams();\n    params.set(\"Token\", token.value);\n    const url: string = \"ws://127.0.0.1:8080/ws?\" + params.toString();\n\n    return Promise.resolve(url);\n  }, [refetchToken]);\n\n  const {\n    sendJsonMessage\n  } = useWebSocket(getSocketUrl, {\n    onOpen: () => console.log('opened'),\n    //Will attempt to reconnect on all close events, such as server shutting down\n    // shouldReconnect: (closeEvent) => true,\n    onMessage,\n  });\n\n\n  function onMessage(message: WebSocketEventMap['message']) {\n    console.log(\"message\", message);\n    console.log(\"subscriptions\", subscriptions);\n\n    console.log(\"typeof message\", typeof message);\n    const data = JSON.parse(message.data);\n\n    // \"ask\":57135.481649167144,\"bid\":57131.51926357042,\"market\":\"btcusd\",\"level\":1}\n    if (data.event === \"price\") {\n      UpdatePrice(data as EventPriceUpdate)\n    } else if (data.event === \"orderResult\") {\n\n\n      const newOrdersState = Object.assign({}, ordersState);\n      newOrdersState[(data as OrderResult).clientId].result = data as OrderResult;\n      setOrdersState(newOrdersState);\n    }\n\n  };\n\n  const unsubscribe = (pair: string, level: number) => {\n    scribe(\"unsubscribe\", pair, level);\n    const subscription: Subscription = {\n      pair,\n      level,\n      subscribed: false\n    };\n\n    const newSubscriptions = Object.assign({}, subscriptions);\n    newSubscriptions[pair] = subscription;\n    setSubscriptions(newSubscriptions);\n  }\n\n  const subscribe = (pair: string, level: number) => {\n    let serverLevel: number = 0;\n    if (!dataInstr?.listIntruments?.[pair]?.[level]) {\n      for (let lvl in dataInstr?.listIntruments?.[pair]) {\n        if (level > (+lvl)) {\n          serverLevel = +lvl;\n        }\n      }\n    }\n\n    scribe(\"subscribe\", pair, serverLevel ? serverLevel : level);\n\n    const subscription: Subscription = {\n      pair,\n      level,\n      subscribed: true\n    };\n\n    if (serverLevel) {\n      subscription.serverLevel = serverLevel;\n    }\n\n    const newSubscriptions = Object.assign({}, subscriptions);\n    newSubscriptions[pair] = subscription;\n    setSubscriptions(newSubscriptions);\n  }\n\n  const order = (instrument: string, quantity: number, side: string) => {\n\n    const clientId = String(Math.floor(Math.random() * 100000));\n\n    const orderPayload: Order = {\n      event: \"order\", // should always be first argument\n      side,\n      instrument,\n      quantity,\n      clientId,\n    }\n    sendJsonMessage(orderPayload);\n    setOrderInProgress(orderPayload);\n\n    const newOrdersState = Object.assign({}, ordersState);\n    newOrdersState[clientId] = {\n      order: orderPayload\n    };\n    setOrdersState(newOrdersState);\n\n    setOpenOrderDialog(true);\n\n  }\n\n  const scribe = (event: string, pair: string, level: number) => {\n    const subscribePayload: Subscribe = {\n      event: event,\n      instrument: pair,\n      levels: [+level]\n    }\n    sendJsonMessage(subscribePayload);\n  }\n\n  const toggleSubscription = (e: React.MouseEventHandler<HTMLDivElement>, pair: string): void => {\n\n    let subscription: Subscription = subscriptions[pair];\n    if (!subscription || !subscription.subscribed) {\n      // subscribe\n      subscribe(pair, 1)\n    } else {\n      // unsubscribe\n      unsubscribe(pair, subscription.level)\n    }\n\n  }\n\n  const changeLevel = (): void => {\n    let subscription: Subscription = subscriptions[levelChangePair];\n    unsubscribe(levelChangePair, subscription.level);\n    subscribe(levelChangePair, fields.level);\n    handleClose();\n  }\n\n  const handleClose = () => {\n    setOpenChangeLevel(false);\n    setLevelChangePair(\"\");\n  }\n\n  const handleCloseOrder = () => {\n    setOpenOrderDialog(false);\n    setOrderInProgress(null);\n  }\n\n  const triggerChangeLevelDialog = (pair: string) => {\n    setOpenChangeLevel(true);\n    setLevelChangePair(pair);\n  }\n\n  const reduceFloatDecimal = (value: number, decimal: number): number => {\n    return +value.toFixed(decimal);\n  }\n\n  const UpdatePrice = (event: EventPriceUpdate) => {\n    console.log(\"subscriptions\", subscriptions);\n    const subLevel: number = subscriptions[event.market].level;\n    const localLevel: number = event.level;\n\n    const ratio: number = subLevel !== localLevel ? localLevel / subLevel : 1;\n    const updatedPrices = Object.assign({}, prices);\n\n    updatedPrices[`${event.market}0`] = reduceFloatDecimal(event.bid, (PairsInfo as any)[event.market].decimalQuote * ratio);\n    updatedPrices[`${event.market}1`] = reduceFloatDecimal(event.ask, (PairsInfo as any)[event.market].decimalQuote * ratio);\n    setPrices(updatedPrices);\n  }\n\n  console.log(\"changeLevel\", changeLevel)\n\n  // useInterval(() => {\n  //   setPrices({\n  //     \"btcusd0\": Math.floor(Math.random() * 100000),\n  //     \"btcusd1\": Math.floor(Math.random() * 100000),\n  //   })\n  // }, 1000);\n\n  return (<>\n    {\n      dataInstr?.listIntruments?.map((item: Instrument) => {\n        return <><Chip\n          icon={subscriptions[item.pair]?.subscribed ? <RemoveIcon /> : <AddIcon />}\n          label={(PairsInfo as any)[item.pair]?.display}\n          onClick={(e: any) => toggleSubscription(e, item.pair)}\n          color={subscriptions[item.pair]?.subscribed ? \"secondary\" : \"default\"}\n          variant=\"outlined\"\n          className={classes.pairTopToggle}\n        />\n        </>\n      })\n    }\n    {/* <Button onClick={() => order(\"\", 1, \"0\")} >test</Button> */}\n    {\n      subscriptions && Object.values(subscriptions).filter((i: Subscription) => i.subscribed).map((item: Subscription, key: number) => {\n        return <Paper key={key} className={classes.pricesContainer}>\n          <Grid container>\n            <Grid item xs={9}>\n              <CryptoIcon className={classes.currencyIcon} symbol={(PairsInfo as any)[item.pair]?.base} />\n              <Typography display=\"inline\" className={classes.pairContainer}>\n                {(PairsInfo as any)[item.pair]?.display}\n              </Typography>\n              <PriceButton className={classes.price} type={TYPE_PRICE.BUY} newPrice={prices[`${item.pair}0`]} onClick={() => order(item.pair, Number(item.level), \"0\")} />\n              <PriceButton className={classes.price} type={TYPE_PRICE.SELL} newPrice={prices[`${item.pair}1`]} onClick={() => order(item.pair,  Number(item.level), \"1\")} />\n              <Typography display=\"inline\">\n                price for {item.level} {(PairsInfo as any)[item.pair]?.baseTitle}\n              </Typography>\n            </Grid>\n            <Grid item xs={3} container alignItems=\"center\" alignContent=\"center\" justify=\"flex-end\">\n              <Button variant=\"outlined\" onClick={() => triggerChangeLevelDialog(item.pair)}>Change level</Button>\n              <IconButton aria-label=\"delete\" color=\"primary\" size=\"small\" className={classes.removeIcon}>\n                <RemoveIcon onClick={() => unsubscribe(item.pair, item.level)} />\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Paper>\n      })\n    }\n\n    <Dialog open={openChangeLevel} onClose={handleCloseOrder} aria-labelledby=\"form-dialog-title\" fullWidth>\n      <DialogTitle id=\"form-dialog-title\">Change level</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Please indicate the new level for this pair.\n          </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"level\"\n          label=\"Level\"\n          type=\"number\"\n          InputProps={{ inputProps: { min: 0 } }}\n          onChange={handleFieldChange}\n          value={fields.level}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n          </Button>\n        <Button onClick={changeLevel} color=\"primary\">\n          Change\n          </Button>\n      </DialogActions>\n    </Dialog>\n    <Dialog open={openOrderDialog} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\n      <DialogTitle id=\"form-dialog-title\">Placing order {\n        orderInProgress ? \"on \" + (PairsInfo as any)[orderInProgress?.instrument]?.display : \"\"\n      }</DialogTitle>\n      <DialogContent>\n\n        {\n          orderInProgress && ordersState[orderInProgress.clientId]?.result ? <DialogContentText>\n            <CryptoIcon className={classes.currencyIcon} symbol={(PairsInfo as any)[orderInProgress?.instrument]?.base} />\n            Successfully {\n              orderInProgress?.side === \"1\" ? \"Sold\" : \"Bought\"\n            } {\n              ordersState[orderInProgress.clientId]?.result?.quantity\n            } {\n              (PairsInfo as any)[(ordersState[orderInProgress.clientId]?.result as OrderResult).instrument]?.baseTitle\n            } for {\n              ordersState[orderInProgress.clientId]?.result?.price\n            } {\n              (PairsInfo as any)[(ordersState[orderInProgress.clientId]?.result as OrderResult).instrument]?.quoteTile\n            } ({\n              ordersState[orderInProgress.clientId]?.result?.pricePerUnit\n            } per unit)\n          </DialogContentText> : <DialogContentText>\n            {\n              orderInProgress && <>\n                <CryptoIcon className={classes.currencyIcon} symbol={(PairsInfo as any)[orderInProgress?.instrument]?.base} />\n                {\n                  orderInProgress?.side === \"1\" ? \"Selling\" : \"Buying\"\n                } {\n                  orderInProgress?.quantity\n                } {\n                  (PairsInfo as any)[orderInProgress?.instrument]?.baseTitle\n                }\n              </>\n            }\n            <LinearProgress />\n          </DialogContentText>\n        }\n      </DialogContent>\n      {\n        orderInProgress && ordersState[orderInProgress.clientId]?.result && <DialogActions>\n          <Button onClick={handleCloseOrder} color=\"primary\">\n            Close\n            </Button>\n\n        </DialogActions>\n      }\n    </Dialog>\n  </>\n  );\n}","/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/tokens.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/repositories/instruments.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/hooks/helpers.ts",[],["160","161"],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/PriceButton/index.tsx",["162","163"],"import { useEffect, useState, useCallback } from \"react\";\n// import { useInterval } from '../../hooks/helpers';\n\nimport {\n    Button, ButtonGroup\n} from \"@material-ui/core\";\nimport _ from \"lodash\";\n\nimport \"./style.css\";\nimport { TYPE_PRICE } from \"./types\";\n\ntype Args = {\n    newPrice: number,\n    onClick: () => void,\n    type: TYPE_PRICE,\n    className?: string\n}\n\nconst positiveChange: string = \"positive-change\";\nconst negativeChange: string = \"negative-change\";\n\nexport function PriceButton({ newPrice, onClick, type, className }: Args) {\n    const [price, setPrice] = useState<number>(0);\n    const [extraClass, setExtraClass] = useState<string>(\"\");\n\n    const resetClass = useCallback(_.throttle(() => {\n        console.log(\"resetClass\")\n        setExtraClass(\"\");\n    }, 3000), [setExtraClass])\n\n    useEffect(() => {\n        if (newPrice < price) {\n            setExtraClass(positiveChange);\n            setPrice(newPrice);\n            resetClass();\n        } else if (newPrice > price) {\n            setExtraClass(negativeChange);\n            setPrice(newPrice);\n            resetClass();\n        }\n    }, [newPrice, price, setPrice])\n\n    return <ButtonGroup variant=\"contained\" color=\"primary\" className={(className ? className : \"\") + \" price \" + extraClass}>\n        {\n            type === TYPE_PRICE.BUY && <Button onClick={onClick} \n            disabled={!Boolean(newPrice)}\n            >Buy</Button>\n        }\n        <Button className=\"priceButton\" disabled>{price}</Button>\n        {\n            type === TYPE_PRICE.SELL && <Button onClick={onClick} disabled={!Boolean(newPrice)}>Sell</Button>\n        }\n    </ButtonGroup>\n}\n",["164","165"],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/components/PriceButton/types.ts",[],"/home/tom/Projects/liquidity-providing/pods/front/dashboard/src/pages/Exchange/styles.ts",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":17,"column":3,"nodeType":"172","messageId":"173","endLine":17,"endColumn":11},{"ruleId":"170","severity":1,"message":"174","line":162,"column":7,"nodeType":"172","messageId":"173","endLine":162,"endColumn":11},{"ruleId":"170","severity":1,"message":"175","line":195,"column":7,"nodeType":"172","messageId":"173","endLine":195,"endColumn":15},{"ruleId":"170","severity":1,"message":"176","line":281,"column":7,"nodeType":"172","messageId":"173","endLine":281,"endColumn":58},{"ruleId":"170","severity":1,"message":"177","line":381,"column":9,"nodeType":"172","messageId":"173","endLine":381,"endColumn":15},{"ruleId":"170","severity":1,"message":"178","line":82,"column":37,"nodeType":"172","messageId":"173","endLine":82,"endColumn":46},{"ruleId":"166","replacedBy":"179"},{"ruleId":"168","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":26,"column":24,"nodeType":"172","endLine":26,"endColumn":35},{"ruleId":"181","severity":1,"message":"183","line":41,"column":8,"nodeType":"184","endLine":41,"endColumn":35,"suggestions":"185"},{"ruleId":"166","replacedBy":"186"},{"ruleId":"168","replacedBy":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"@typescript-eslint/no-unused-vars","'Collapse' is defined but never used.","Identifier","unusedVar","'Link' is assigned a value but never used.","'LinkText' is assigned a value but never used.","'SidebarCategory' is assigned a value but never used.","'toggle' is assigned a value but never used.","'setFields' is assigned a value but never used.",["188"],["189"],"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has a missing dependency: 'resetClass'. Either include it or remove the dependency array.","ArrayExpression",["190"],["188"],["189"],"no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},"Update the dependencies array to be: [newPrice, price, resetClass, setPrice]",{"range":"193","text":"194"},[1119,1146],"[newPrice, price, resetClass, setPrice]"]